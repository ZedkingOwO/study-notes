Http请求头:
    #起始行：指定了请求的方法、目标 URL 和协议版本。
    #请求头字段：包含了多个键值对，每个键值对表示一个请求头字段，用于传递请求的各种元信息。
    GET /index.html HTTP/1.1
    Host: www.example.com
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) 

Http响应头：
    #起始行：指定了协议本版本、响应的状态码和对应的状态消息。
    #响应头字段：包含了多个键值对，每个键值对表示一个响应头字段，用于传递响应的各种元信息。
    #响应体（Body）：包含了实际的响应数据，例如 HTML 页面的内容或者文件的内容。
    HTTP/1.1 200 OK
    Content-Type: text/html; charset=utf-8
    Content-Length: 1234
    Server: Apache/2.4.39 (Unix)
            <响应体内容>    

HTTP 协议中常见的请求方法包括：
    1. GET：请求指定的资源。
    2. POST：向指定的资源提交数据进行处理（例如提交表单或上传文件）。
    3. PUT：请求服务器存储一个资源，通常是替代服务器上的指定资源。
    4. DELETE：请求服务器删除指定的资源。
    5. HEAD：请求获取指定资源的响应头信息，不返回响应体。
    6. OPTIONS：用于获取目标资源支持的通信选项。
    7. TRACE：回显服务器收到的请求，用于测试或诊断。
    8. PATCH：用于对资源进行部分修改


Http协议工作机制：
    串行连接：无论多少个请求，排队一个一个来，100个请求，就是100次连接三次握手四次分手，而且如果有一个资源卡住，其他请求会被阻塞。
    并行连接：同时下载100个页面资源，虽然效率提高了，但是100次请求连接，还是要100次三次挥手和四次分手。
    持久连接：我们打开网页，需要加载其他页面资源，这时候我们已经和服务端建立TCP连接，我们直接在这次连接中反复下载请求，
             请求响应，把若干资源在一个连接内下载完。复用一个TCP连接，但是他是串行下载的，就是逐个请求响应，虽然减少了TCP连接（握手/挥手），但又会阻塞（单车道）。
    持久连接和管道：在持久连接的基础上并行连接，复用一次TCP请求，并且并行请求服务器，类似于多车道


http协议各个版本的区别：
    HTTP/0.9: 这是最早的版本，只支持GET请求，响应只能是HTML文档，并且不支持头部信息，这个版本主要用于在服务器和客户端之间传输简单的HTML文档。
    HTTP/1.0: 这个版本增加了一些功能，如支持更多的请求方法（如POST和HEAD）、引入了MIME（多用途互联网邮件扩展）使得它支持多种多媒体格式，
              但它是串行连接，每次请求都要建立TCP连接。
    HTTP 1.1：引入持久连接，再一次TCP连接中可以多次请求(复用连接),但是在同一个TCP连接里，所有数据都是依次请求，服务器只能顺序处理响应，
              如果有一个繁忙了，其他的要排队，容易造成队头堵塞。
    HTTP/2.0：结合持久连接+并行连接，复用一个连接并同时请求100个资源，解决了HTTP/1.1中存在的“队头堵塞”问题；
              头部压缩：HTTP/2.0使用了HPACK算法对HTTP头部进行压缩，减少了头部大小，节省了带宽和传输时间；
              支持SSL/TLS它在HTTP之上添加了SSL/TLS层，用于加密和保护数据。

Nginx为什么性能好：
    异步阻塞非和IO多路复用

    在 I/O 多路复用中，进程或线程可以使用一个系统调用，如 epoll、select同时监视多个文件描述符的状态。当其中任何一个文件描述符就绪时系统调用会返回，并告知进程或线程哪些文件描述符已经就绪。

    Nginx 支持 select 和 epoll 两种机制，它们都是实现 I/O 多路复用的机制。

    在处理大量并发连接时，epoll 的性能通常比 select 更好。这是因为 select 在处理大量文件描述符时会进行线性扫描，最大1024个，不断轮询所有的文件描述符导致时间复杂度为 O(n)，而 epoll 使用的是基于事件的回调机制，在没有事件发生时可以让进程休眠，时间复杂度为 O(1)，因此效率更高。

    Nginx 使用了零拷贝技术来提高文件传输的效率。在进行文件读取或写入操作时，Nginx 可以直接在内核态和用户态之间传输数据，而不需要额外的数据拷贝操作。MMAP(把内核空间的数据映射到用户空间)




Nginx优化：
    内核优化：
        操作系统最大文件描述符/Nginx的最大文件描述符
        net.core.somaxconn = 1024  监听最大连接数
        net.core.netdev_max_backlog = 1024 指定内核在将数据包丢弃之前可以排队的最大数据包数。增加此值可以减少 Nginx 因数据包丢失而导致的连接错误。（如果连接满了 可以队列排队的最大值）
        net.ipv4.tcp_timestamps = 0 启用或禁用 TCP 时间戳。禁用此功能可以提高 Nginx 的性能
        net.ipv4.tcp_fin_timeout = 30 指定在收到 FIN 标志后保持连接处于 TIME_WAIT 状态的时间。减少此值可以释放连接资源并提高 Nginx 的性能。
        net.ipv4.tcp_tw_reuse = 1 启用或禁用允许重用处于 TIME_WAIT 状态的连接。启用此功能可以提高 Nginx 处理并发连接的能力。
    安全方面:
        启动用户
        隐藏版本号
        basic验证
        访问控制列表,比如nginx状态页。
        防盗链判断请求头中的Referer字段
        Https加密
    
    性能方面:
        worker_processes  auto;     #worker进程个数，一般设为和CPU核心数相同，4的倍数，
        worker_rlimit_nofile 65536; #所有worker进程能打开的文件数量上限;
        worker_connections  65536;  #设置单个工作进程的最大并发连接数，默认512，生产建议根据性能修改更大的值;
        worker_cpu_affinity auto;  #cpu亲缘性绑定 不绑定来回切换浪费资源浪费缓存性能auto或者cpu mask;
        worker_priority -20;       #工作进程nice优先级 -20—19;
       
        accept_mutex on;           #互斥 惊群 高并发并且cpu绑定可以打开;
        multi_accept on;           #一个工作进程只能一次接受一个新的网络连接，设置为on接受多个;
        
        use epoll;                  #使用 epoll事件驱动;
        sendfile on;	   	        #开启零复制 MMAP内存映射；
        gzip on;                    #开启压缩；

        启用 Keepalive 连接 慢接口需要调大
        keepalive_timeout   65; # 设置客户端空闲连接超时时间
        keepalive_requests  100; # 设置客户端允许的最大请求数量
        
        下载限制和上传限制
        启用缓存/限速/请求/最大链接/
        日志优化格式/IP地址透传



root和alis的区别：
    alias是别名，完全取代，访问的路径alias指定的路径和root没关系；
    root是根的意思，server里面location路径要带上root指定的路径；

location优先级:
         从高到低
            =  ^~  ~/~*  /

Nginx调度算法:
    随机
    最少连接算法
    轮询/加权轮询
    ip_hash:客户端地址IPv4的前24位数，也就是一个网段（会话保持）；
    hash（key）：对变量（IP，浏览器，URL）进行哈希运算，对权重总数取模，hash(10.0.0.10)%3  = 0 ,1 ,2  0服务器1，12服务器二；

    hash取模算法缺点：如果总权重改变或者服务器扩缩容，会导致会话丢失；
    一致性哈希算法：hash(client ip)%2^32-1


Nginx常见模块：
    ngx_http_ssl_module：支持 HTTPS 协议，用于加密和保护数据传输。
    ngx_http_gzip_module：用于对 HTTP 响应内容进行压缩，减少数据传输量，提高网站性能。
    ngx_http_proxy_module：支持反向代理，用于将请求转发给后端服务器，并将响应返回给客户端。
    ngx_http_fastcgi_module：支持 FastCGI 协议，用于与 FastCGI 进程通信，实现动态内容的处理，如 PHP、Python、Ruby 等脚本语言的执行。
    ngx_http_rewrite_module：提供 URL 重写功能，可以通过规则修改请求的 URL。
    

break和lster：
    laster退出全部，break当前
http常见响应码；
    1xx：    
    2xX:
      200 OK：请求已成功。
      201 Created：请求已经被实现，而且有一个新的资源已经依据请求的需要而建立。
      204 No Content：服务器成功处理了请求，但没有返回任何内容。
    3xx:
      301 Moved Permanently：永久重定向客户端会把这个RUL缓存到本地，后续用本地缓存访问。
      302 Found：临时重定向，会请求后端服务器。
      
    4xx：
      400 Bad Request：请求无效，服务器不理解请求的语法。
      401 Unauthorized：请求未经授权，需要身份验证。
      403 Forbidden：服务器拒绝请求，权限不足。
      404 Not Found：服务器未找到请求的资源。
    5xx：

      503 Service Unavailable：表示服务器暂时无法处理请求，通常是由于服务器过载或正在进行维护。
      502 Bad Gateway   当Nginx返回502错误时，通常表示Nginx作为代理服务器无法从上游服务器获取有效的响应。
          后端服务器故障、nginx配置问题、高负载或者资源耗尽、nginx与后端服务器通信问题
          检查后端服务器是否正常运行，网络连接是否正常，可以通过 ping 命令检查网络连接，通过 telnet 命令检查后端服务器的端口是否开启，通过 curl 命令测试后端服务器的响应。
      504 Gateway timeout 
          后端服务挂了、响应超时、nginx设置超时时间不合理
          Nginx 等待后端服务器响应的最长时间：proxy_read_timeout 2s 、检查 Nginx 配置文件中的代理设置，确保代理到后端服务器的配置正确、检查 Nginx 错误日志.


四层负载和七层负载的区别：
    lvs工作在传输层，只能IP地址和端口号代理。
    nginx和haproxy工作在应用层，可以根据IP端口还支持如URL、请求头代理。

    对比4L和7L：
           7L：
            SSL会话卸载，只需要在代理配置ssl加密、内容缓存（四层拆不到内容）、支持高级的应用层访问控制、除了四次的会话保持还支持七层的Cookie、URL参数等进行会话保持。支持7层健康性检测
            性能不如四层
           4L：
             性能好延迟低、相对七层配置简单、支持IP会话保持或源地址和端口会话保持。
