

<进程名> & 在当前bash后台运行，退出终端进程关闭。
no hup <进程名> &  在当前bash后台运行，退出终端不关闭（使用 nohup 命令使该进程忽略挂起信号）



scp   主要用于复制文件，它不具备同步文件夹的功能。
rsync 可以实现文件和文件夹的同步，它会比较源和目标文件的差异，只传输发生变化的部分，从而实现文件夹的增量同步。

uptime/top:
    15:27:36 up 1 day,  3:12,  4 users,  load average: 0.08, 0.12, 0.15
    1分钟、5分钟和15分钟内的平均负载。一个核心不超过3，例如 2core 平均负载值为6正常；


请求一个网页的流程：
    crul telnet ssh  www.taobao.com
    1.DNS域名解析 > 优先级 hosts文件 > 缓存 > DNS服务器 (53)               
        排查命令：host dig nslookup 
    2.拿到ip请求百度服务器，TCP三次SYN-SYN-ACK-ACK/            
        排查命令： ping    抓包：tcpdump  追踪路由：traceroute  route -n
    3.一旦TCP连接建立，客户端向服务器发送HTTP请求    
        说请求报文头格式、协议版本、常见请求方法   
          先看 ss  netstat   看进程负载：top /uptime  ps aux  pstree   
    4.服务器返回HTTP响应 涉及到IO
        说响应报文
            vmstat(cpu.memory.disk) 磁盘IO：iostat、iotop 网络IO：nload iftop  内存使用：free(读Cached/写Buffers)
    5.断开tcp连接
        四次回收


讲一下ISO模型(每层的意义和协议)：
    物理层：
        就像是我们在网络中使用的电缆、无线信号或者光纤，物理连通。
    数据链路层：
        在报文上加上地址，确保报文能到达对端主机。快递地址。
    网络层：
        IP、ICMP
        就像是一个地图/导航，它负责决定数据应该走哪条路线，以确保数据能够安全、迅速地到达目的地。
    传输层：
        TCP全双工 双向确认 重传（我记得好像是）、UDP多对多，一对多
        传输层表示进程和进程间通信 端口区分进程
    会话层：

    表示层:
        TLS/SSL

    应用层：
        HTTP、SSH、FTP

  总结：我用送快快递的例子和您描述一下ISO七层模型
       物理层：就像马路一样，它是传输快递的基础，就像是把快递从一个地方运到另一个地方一样。
       数据链路层：类似于你家的小区，把每个快递上都写着收货人的地址，确保每块能够准确地送到目的地。
       网络层：像是给快递配送员提供地图和导航一样，确保他们能够按照最佳路线送货，以最快的方式到达目的地。
       传输层：就像是你家的门牌号一样，它是确保快递送到正确位置的关键。传输层使用端口号来标识不同的服务或进程，确保快递被送到正确的目的地。
       会话层：这一层就像是你提前和我约定的具体交流方式，比如通过电话沟通还是面对面交流。会话层确保我们之间的通信顺利进行，并且保持着良好的互动。
       表示层：表示层就像是我们使用的语言或者表达方式，确保我们传递的信息能够被对方正确理解。在我们的例子中，表示层确保你能够理解我说的话，因为我们都使用中文进行交流。
       应用层：应用层就像是你要我送的具体快递内容。我会根据你的需求选择合适的包装和保护措施，比如如果你要送冰淇淋，我会选择冷藏的方式来保持它的新鲜度；
               如果是易碎品，我会使用泡沫箱来保护它。应用层确保我们能够用合适的方式发送和接收快递。



有状态和无状态服务：
    有状态服务：我们在玩游戏时，游戏服务会记录我们的游戏状态，比如成就、等级、击杀、技能CD、
    服务器需要维护每个玩家的状态信息，我们下一次登录依然记录这上一次退出前的状态。
   
    一个静态文件服务器可以提供网站的静态文件，如HTML、CSS、JavaScript、图像等。
    每次客户端请求文件时，服务器都会根据请求来返回相应的文件，而不会记住之前的请求信息。
    这种服务器不需要保存任何客户端状态，只需要简单地响应请求即可。
    如果我以访客不登录访问一些服务，通常都是无状态，他不会记录我们状态信息。以前查看的历史也不会保存


什么是inode,什么是block:
    inode 是文件系统中用来存储文件元数据的数据结构，
    包括文件的权限、所有者、大小、时间戳等信息，但不包括文件名或实际内容。
    Inode 中包含了指向文件内容所在的磁盘块的指针，这些指针称为“指向数据块的指针”。
    Block 是文件系统中用来存储实际文件内容的单位，通常是连续的一段磁盘空间。
    
    访问时间（Access Time） - 用 atime 表示，记录了最后一次文件被访问的时间。
    修改时间（Modification Time） - 用 mtime 表示，记录了最后一次文件内容被修改的时间。
    改变时间（Change Time） - 用 ctime 表示，记录了最后一次文件的元数据（各种权限、所有者等）被改变的时间。


linux优化:
    安全:
        严格管理权限sudo，特殊用acl权限。
        禁止ROOT远程登录。
        关闭不必要的服务和端口可以减少系统暴露在攻击面上的机会。
        使用复杂密码并定期更换密码，可以有效提高系统的安全性。
        及时安装最新的安全补丁可以修复已知的漏洞，提高系统的安全性。
        修改默认的ssh和相关中间件端口等。

    
命令：
    rpm yum  dpkg apt 

    lsblk  fdisk gdisk mkfs mount df

    ip ifconfig nmcli fping tcpdump route tracroute nload

    pstree ps nice lsof

    find locate tree

    tar -cvf archive.tar -C /path/to/director   tar -xvf archive.tar -C /root/
   
    ln source_file target_link #硬连接
    ln -s src.sh  /dest/dest   #软连接
    软连接硬连接的区别:
        软连接：
            类似于Windows中的快捷方式，
        硬连接:
            硬连接是一个文件的多个名称指向同一个inode，它们共享同一个数据块。

cron：
 * * * * *  分 时 日 月 周
 - 表示范围取值 1-5 第1到第5分每分钟执行一次  */5 */6 * * *     #表示每6小时，在该小时内，每5分钟执行一次

    crontab -l 列出所有任务
    crontab -e 编辑任务
    crontab -r 删除所有

<进程名> & 在当前bash后台运行，退出终端进程关闭。
no hup <进程名> &  在当前bash后台运行，退出终端不关闭（使用 nohup 命令使该进程忽略挂起信号）



scp   主要用于复制文件，它不具备同步文件夹的功能。
rsync 可以实现文件和文件夹的同步，它会比较源和目标文件的差异，只传输发生变化的部分，从而实现文件夹的增量同步。

uptime/top:
    15:27:36 up 1 day,  3:12,  4 users,  load average: 0.08, 0.12, 0.15
    1分钟、5分钟和15分钟内的平均负载。一个核心不超过3，例如 2core 平均负载值为6正常；


请求一个网页的流程：
    crul telnet ssh  www.taobao.com
    1.DNS域名解析 > 优先级 hosts文件 > 缓存 > DNS服务器 (53)               
        排查命令：host dig nslookup 
    2.拿到ip请求百度服务器，TCP三次SYN-SYN-ACK-ACK/            
        排查命令： ping    抓包：tcpdump  追踪路由：traceroute  route -n
    3.一旦TCP连接建立，客户端向服务器发送HTTP请求    
        说请求报文头格式、协议版本、常见请求方法   
          先看 ss  netstat   看进程负载：top /uptime  ps aux  pstree   
    4.服务器返回HTTP响应 涉及到IO
        说响应报文
            vmstat(cpu.memory.disk) 磁盘IO：iostat、iotop 网络IO：nload iftop  内存使用：free(读Cached/写Buffers)
    5.断开tcp连接
        四次回收


讲一下ISO模型(每层的意义和协议)：
    物理层：
        就像是我们在网络中使用的电缆、无线信号或者光纤，物理连通。
    数据链路层：
        在报文上加上地址，确保报文能到达对端主机。快递地址。
    网络层：
        IP、ICMP
        就像是一个地图/导航，它负责决定数据应该走哪条路线，以确保数据能够安全、迅速地到达目的地。
    传输层：
        TCP全双工 双向确认 重传（我记得好像是）、UDP多对多，一对多
        传输层表示进程和进程间通信 端口区分进程
    会话层：

    表示层:
        TLS/SSL

    应用层：
        HTTP、SSH、FTP

  总结：我用送快快递的例子和您描述一下ISO七层模型
       物理层：就像马路一样，它是传输快递的基础，就像是把快递从一个地方运到另一个地方一样。
       数据链路层：类似于你家的小区，把每个快递上都写着收货人的地址，确保每块能够准确地送到目的地。
       网络层：像是给快递配送员提供地图和导航一样，确保他们能够按照最佳路线送货，以最快的方式到达目的地。
       传输层：就像是你家的门牌号一样，它是确保快递送到正确位置的关键。传输层使用端口号来标识不同的服务或进程，确保快递被送到正确的目的地。
       会话层：这一层就像是你提前和我约定的具体交流方式，比如通过电话沟通还是面对面交流。会话层确保我们之间的通信顺利进行，并且保持着良好的互动。
       表示层：表示层就像是我们使用的语言或者表达方式，确保我们传递的信息能够被对方正确理解。在我们的例子中，表示层确保你能够理解我说的话，因为我们都使用中文进行交流。
       应用层：应用层就像是你要我送的具体快递内容。我会根据你的需求选择合适的包装和保护措施，比如如果你要送冰淇淋，我会选择冷藏的方式来保持它的新鲜度；
               如果是易碎品，我会使用泡沫箱来保护它。应用层确保我们能够用合适的方式发送和接收快递。



有状态和无状态服务：
    有状态服务：我们在玩游戏时，游戏服务会记录我们的游戏状态，比如成就、等级、击杀、技能CD、
    服务器需要维护每个玩家的状态信息，我们下一次登录依然记录这上一次退出前的状态。
   
    一个静态文件服务器可以提供网站的静态文件，如HTML、CSS、JavaScript、图像等。
    每次客户端请求文件时，服务器都会根据请求来返回相应的文件，而不会记住之前的请求信息。
    这种服务器不需要保存任何客户端状态，只需要简单地响应请求即可。
    如果我以访客不登录访问一些服务，通常都是无状态，他不会记录我们状态信息。以前查看的历史也不会保存


什么是inode,什么是block:
    inode 是文件系统中用来存储文件元数据的数据结构，
    包括文件的权限、所有者、大小、时间戳等信息，但不包括文件名或实际内容。
    Inode 中包含了指向文件内容所在的磁盘块的指针，这些指针称为“指向数据块的指针”。
    Block 是文件系统中用来存储实际文件内容的单位，通常是连续的一段磁盘空间。
    
    访问时间（Access Time） - 用 atime 表示，记录了最后一次文件被访问的时间。
    修改时间（Modification Time） - 用 mtime 表示，记录了最后一次文件内容被修改的时间。
    改变时间（Change Time） - 用 ctime 表示，记录了最后一次文件的元数据（各种权限、所有者等）被改变的时间。


linux优化:
    安全:
        严格管理权限sudo，特殊用acl权限。
        禁止ROOT远程登录。
        关闭不必要的服务和端口可以减少系统暴露在攻击面上的机会。
        使用复杂密码并定期更换密码，可以有效提高系统的安全性。
        及时安装最新的安全补丁可以修复已知的漏洞，提高系统的安全性。
        修改默认的ssh和相关中间件端口等。

    
命令：
    rpm yum  dpkg apt 

    lsblk  fdisk gdisk mkfs mount df

    ip ifconfig nmcli fping tcpdump route tracroute nload

    pstree ps nice lsof

    find locate tree

    tar -cvf archive.tar -C /path/to/director   tar -xvf archive.tar -C /root/
   
    ln source_file target_link #硬连接
    ln -s src.sh  /dest/dest   #软连接
    软连接硬连接的区别:
        软连接：
            类似于Windows中的快捷方式，
        硬连接:
            硬连接是一个文件的多个名称指向同一个inode，它们共享同一个数据块。

cron：
 * * * * *  分 时 日 月 周
 - 表示范围取值 1-5 第1到第5分每分钟执行一次  */5 */6 * * *     #表示每6小时，在该小时内，每5分钟执行一次

    crontab -l 列出所有任务
    crontab -e 编辑任务
    crontab -r 删除所有
