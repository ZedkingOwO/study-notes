

MySQL日志怎么找：
    SHOW VARIABLES LIKE 'log_%';
    lsof | grep mysql


mysql主从原理:
    两个日志： Relay log 中继日志、binlog二进制日志
    主要有三个线程：master上的 binlog dump线程，slave上的IO线程、SQL线程;

    主从要进行数据同步,当主节点有写操作时比如INSERT,UPDATE,会把这些操作写入binlog二进制日志.
    当我们配置了主从，master节点上会启动一个binlog dump Thread，他会一直监视着binlog日志,
    如果binlog日志发生变化就会把数据发送给Slave的 IO Thread 收到数据后，写到Slave节点上Relay Log，
    Slave节点会启动 SQL Thead，他会一直监视着Relay Log ，并解析数据写入到从库。

MHA：


读写分离器的工作流程大致如下：
    1.接收到客户端的 SQL 请求。
    2.根据 SQL 的类型，判断是读操作还是写操作。
    3.如果是读操作，则将该请求路由到只读数据库节点中的一个，通常采用轮询或者负载均衡算法选择合适的节点。
    4.如果是写操作，则将该请求发送到主数据库节点。
    5.将数据库节点的执行结果返回给客户端。

简单SQL语句：
    CREATE TABLE teacher (
    id int unsigned NOT NULL AUTO_INCREMENT,
    name varchar(20) NOT NULL,
    age tinyint unsigned DEFAULT NULL,
    gender enum('M','F') DEFAULT 'M',
    PRIMARY KEY (id)),
    ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;

    desc student;
    show create table db1.student;

    insert into teacher(name,age,gender) values ('zsgh',21,'M'),('zy',30,'F'),('zx',21,'F'),('lkf',21,'F');
    select * from teacher;
    select * from teacher  limit 0,3;
    

    ALTER TABLE student RENAME stu;

    UPDATE stu SET age=30,gender='F';
    update stu SET age=21, gender='M' WHERE ( id=15 OR name IS NULL );
    delete from stu where ( name IS NULL or id=14 );


查询语句：
    select id,name from stu where id in/not (11,15,19);
    select id,name from stu where id>=11 and/&& id <14;
    select id,name from stu where id<=12 or/|| id>19;

    select max(id),min(id),avg(age) from stu;
    select gender from teacher  group by gender;

    SELECT * FROM students ORDER BY age ASC/DESC;

多表查询：
    SELECT * FROM emp，salgrade WHERE sal BETWEEN losal AND hisal; 
自连接：
    SELECT work.name as '员工' ，boss.name as '领导'
    FROM emp as work ,emp as boss
    WHERE work.mgr = boss.empno;

子查询：
    select * from emp where deptno = ( select deptno from emp where name = 'lixijun');

    select name,gangwei,gongzi,etmp from  emp  where  job IN (select DISTINCT job from emp where deptno = 10) and deptno != 10;

临时表：
    select * from (
        select cat_id,max(shop_price) as max from ecs_goods group by cat_id ) temp,ecs_goods
        where temp.cat_id = ecs_goods.cat_id
        and temp.max = ecs_goods.shop_rice 

合并：union all union(自带祛重)
    select * from emp where sal > 2500 union select * from emp where job='file'

    以前的只显示匹配到的

左外连接（左边的表完全显示，右边的表根据条件显示）：
    select `name` ,stu.id,grade from stu left join exam   on stu.id = exam.id;
右外连接（右边的表完全显示，左边的表根据条件显示）：
    select `name` ,stu.id,grade from stu right join exam  on stu.id = exam.id;


mysql优化：
    安全：
        强密码策略
        限制远程访问和端口
        权限管理
        备份和恢复策略
        SSL加密连接
    性能：
        读写分离
        索引优化
        查询优化
        缓存：使用缓存技术（如Memcached或Redis）
        硬件优化： 在必要时升级硬件，如增加内存、优化磁盘配置或使用SSD硬盘等。


    show staus

    事务日志 二进制日志 慢查询日志 中继日志 


备份:
  mysqldump(逻辑备份)

  xtarbackup(二进制/恢复前要整理事务)
